service: ttec-vanity-phone-number-service

provider:
  name: aws
  tracing:
    apiGateway: true
    lambda: true
  runtime: nodejs14.x
  region: us-east-1
  memorySize: 1664
  timeout: 30
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
          Resource:
            - !GetAtt VanityNumbersTable.Arn

plugins:
  - serverless-webpack
package:
  individually: true

functions:
  VanityNumbersLambdaFunction:
    handler: index.handler
    name: VanityNumbersLambdaFunction

outputs:
  myLambdaFunctionArn:
    value:
      "Fn::GetAtt":
        - VanityNumbersLambdaFunction
        - Arn
    export:
      name: VanityNumbersLambdaFunctionArn

resources:
  Resources:
    VanityNumbersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: PhoneNumbers
        AttributeDefinitions:
          - AttributeName: PhoneNumber
            AttributeType: S
        KeySchema:
          - AttributeName: PhoneNumber
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"

    LambdaPermissionConnectInvoke: # This is bad practise for production as we are allowing any service to invoke this function
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:VanityNumbersLambdaFunction # this should be dynamically referenced
        Principal: "*"

custom:
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules: false
    packager: "npm"
